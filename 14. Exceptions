#1. Write a program to generate Arithmetic Exception without exception handling 

result = 56 / 0  
print(result) 

#2. Handle the Arithmetic exception using try-catch block 

try:
    result = 79 / 0  
    print(result)  
except ZeroDivisionError:
    print("Error: Division by zero is not allowed.")

#3. Write a method which throws exception, Call that method in main class without try block 

def throw_exception():
    raise ZeroDivisionError("Throwing exception")  

throw_exception()  

#4. Write a program with multiple catch blocks 

try:
    a = int(input("Enter a number: "))  
    result = 56 / a  
    print("Result:", result)
except ZeroDivisionError:
    print("Error: Division by zero is not allowed.")
except ValueError:
    print("Error: Invalid input! Please enter a number.")
except Exception as e:  
    print("An unexpected error occurred:", e)

#5. Write a program to throw exception with your own message 

def throw_exception():
    raise ValueError("This is my own exception message.")

throw_exception()  

#6. Write a program to create your own exception 
class MyException(Exception):
    pass

raise MyException("This is my own exception!")

#7. Write a program with finally block 

try:
    print(93 / 0)  
except ZeroDivisionError:
    print("Error: Division by zero!")
finally:
    print("The finally block statement")

#8. Write a program to generate Arithmetic Exception 

try:
    result = 76 / 0  
    print(result)  
except ZeroDivisionError:
    print("Error: Division by zero is not allowed.")

#9. Write a program to generate FileNotFoundException 

try:
    file = open("non_existent_file.txt", "r")  
    content = file.read()
    file.close()
except FileNotFoundError:
    print("Error: The file was not found.")

#10. Write a program to generate ClassNotFoundException 

try:
    from non_existent_module import SomeClass  
except ImportError:
    print("Error: The specified class or module was not found.")

#11. Write a program to generate IOException 

try:
    file = open("/invalid/path/to/file.txt", "r") 
except OSError:  
    print("Error: An I/O error occurred while accessing the file.")

#12. Write a program to generate NoSuchFieldException

class MyClass:
    def __init__(self):
        self.existing_field = 42  

obj = MyClass()

print(obj.non_existent_field)  
